
;; OLD Functions - Now unused ;;;;;
;; Removes "" from a list ([String] -> [String])
(define (remove-emptys x)
  (remove* (list "") x))

(define (tag-spacer-old x)
  (let ((chars (string->list x)))
    (cond
      [(null? chars) '()]
      [(eq? (car chars) #\<) (cons #\space (cons  (car chars) (tag-spacer-old (list->string (cdr chars)))))]
      [(eq? (car chars) #\>) (cons (car chars) (cons #\space (tag-spacer-old (list->string (cdr chars)))))]
      [else (cons (car chars) (tag-spacer-old (list->string (cdr chars))))])))

(define (unstylize-and-descript list-of-tokens)
  (cond
    [(null? list-of-tokens) '()]
    [(not (or (equal? "<style>" (car list-of-tokens)) (equal? "<script>" (car list-of-tokens)))) (cons (car list-of-tokens) (unstylize-and-descript (cdr list-of-tokens)))]
    [else (unstylize-and-descript (or (is-member "</style>" list-of-tokens) (is-member "</script>" list-of-tokens)))]))

(define (de-tagger xs)
  (cond
    [(null? xs) '()]
    [(equal? (car (string->list (car xs))) #\< ) (de-tagger (cdr xs))]
    [else (cons (car xs) (de-tagger (cdr xs)))]))